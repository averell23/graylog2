##
# Unicorn config at
# Managed by Chef - Local Changes will be Nuked from Orbit (just to be sure)
##
# What ports/sockets to listen on, and what options for them.
<% @listen.each do |port,options| %>
  listen <%= port %>, <%= options %>
<% end %>

<%- if @working_directory %>
working_directory '<%= @working_directory %>'
<%- end %>

# What the timeout for killing busy workers is, in seconds
timeout <%= @worker_timeout %>

# Whether the app should be pre-loaded
preload_app true

# How many worker processes
worker_processes <%= @worker_processes %>

# ensure Unicorn doesn't use a stale Gemfile when restarting
# more info: https://willj.net/2011/08/02/fixing-the-gemfile-not-found-bundlergemfilenotfound-error/
before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = "<%= @bundle_gemfile %>"
end

# What to do before we fork a worker
before_fork do |server, worker|
  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  ActiveRecord::Base.connection.disconnect! if defined?(ActiveRecord::Base)
  Resque.redis.client.disconnect if defined?(Resque)

  # Before forking, kill the master process that belongs to the .oldbin PID.
  # This enables 0 downtime deploys.
  old_pid = "<%= @pid %>.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

# What to do after we fork a worker
after_fork do |server, worker|
  # the following is *required* for Rails + "preload_app true",
  ActiveRecord::Base.establish_connection if defined?(ActiveRecord::Base)
  Resque.redis.client.connect if defined?(Resque)
  # Reset the memcache-based object store
  Rails.cache.instance_variable_get(:@data).reset if defined?(Rails) && Rails.cache.instance_variable_get(:@data).respond_to?(:reset)
end

# Where to drop a pidfile
pid '<%= @pid %>'

<%- if @stderr_path %>
# Where stderr gets logged
stderr_path '<%= @stderr_path %>'

<%- end %>
<%- if @stdout_path %>
# Where stdout gets logged
stdout_path '<%= @stdout_path %>'

<%- end %>
